(= Player (class
  :jump 0
  :dir 6

  :step (func ()
    ; input: left-right movement
    (if (key "left")  (do (= :dir 6) (super':move '(-0.15 . 0)))
        (key "right") (do (= :dir 0) (super':move '(+0.15 . 0)))
    )
    ; input: jumping
    (if (and (key "up") (< 0 :jump))
        (do
          (when (is :jump 6) (play jump.wav nil))
          (super':move '(0 . -1.025))
          (= :jump (- :jump 1))
        )
        (super':on-ground?)
        (= :jump 6)
    )
    ; update physics
    (super':step)
    ; update camera
    (let (x . y) (super':get-pos))
    (camera (cons
      (- 64 (clamp (- x 4) 64 (- (* 128 8) 64)))
      (- 64 (clamp (- y 4) 64 (- (*  24 8) 64)))
    ))
    ; draw sprite
    (draw x y player.bmp (+ :dir
      (if (not (super':on-ground?)) 1             ; on fly
          (< (abs (car (super':get-vel))) 0.3) 0  ; staying
          (+ 2 (% (* 5 (time)) 4))                ; walking
      )
    ))
  )

  :kill (func ()
    (= player nil)
    (play hurt.wav nil)
    (stop music.wav)
    (make-puffts (super':get-pos) 9)
  )
 
  :smashed? (func (e)
    (when (super':collide? e)
      ; handle jump n' smash
      (if (<= (* (super':get-size) 0.60)
              (cdr (2- (e':get-pos) (super':get-pos)))
          )
          (do (e':kill) (super':bounce))
          (:kill)
      )
    )
  )
 
  init (func (pos)
    (= super (Actor pos 8)
       player self
    )
  )
))
