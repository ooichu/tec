(= GRAVITY  '(0 . 0.2)
   FRICTION 0.9
)

(= Actor (class
  :pos nil
  :get-pos (getter :pos)

  :vel (cons 0 0)
  :get-vel (getter :vel)
  
  :move (func (acc)
    (= :vel (2+ :vel acc))
  )

  :size nil
  :get-size (getter :size)

  :collide? (func (other)
    (< (dist :pos (other':get-pos))
       (/ (+ :size (other':get-size)) 2)
    )
  )

  :on-ground nil
  :on-ground? (getter :on-ground)

  :smack nil
  :smack? (getter :smack)

  :float nil  
  :bounced nil

  :step (func ()
    (= :bounced nil 
       :vel (2* (if :float :vel (2+ :vel GRAVITY)) FRICTION)
    )
    ; update collision with tilemap
    (unless :float
      (let a (2+ :pos '(1 . 1))
           b (2+ :pos (cons (- :size 1) (- :size 1)))
           (new-x . new-y) (2+ :vel
             (cons (car (if (< (car :vel) 0) a b))
                   (cdr (if (< (cdr :vel) 0) a b))
             )
           )
      )
      ; move on x-axis
      (= :smack     (or (solid? new-x (cdr a)) (solid? new-x (cdr b)))
         :on-ground (or (solid? (car a) new-y) (solid? (car b) new-y))
      )
      ; handle horizontal collision (wall)
      (when :smack
        (setcar :vel (* (car :vel) -0.5))
      )
      ; handle vertical collision (floor)
      (when :on-ground
        (= :on-ground (<= 0 (cdr :vel)))
        (setcdr :vel 0) 
      )
    )
    ; update position
    (= :pos (2+ :pos :vel))
  )

  init (func (pos size float)
    (= :pos pos
       :size size
       :float float
    )
  )

  :bounce (func ()
    (unless :bounced
      (= :jump 0
         :bounced t
      )
      (setcdr :vel (* (cdr :vel) -1.1))
    )
  )

  :alive t
  :kill (setter :alive)
  :alive? (getter :alive)
))
