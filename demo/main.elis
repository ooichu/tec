(load "config.elis")
(load "utils.elis")
(load "actor.elis")
(load "player.elis")
(load "enemy.elis")
(load "monster.elis")
(load "ufo.elis")
(load "ghost.elis")
(load "particle.elis")
(load "pufft.elis")
(load "pickup.elis")
(load "gem.elis")

(= init (func ()
  ; restart music
  (play music.wav t)  
  ; load tile maps
  (= level (tilemap "maps/level.dat"))
  (= clouds (tilemap "maps/clouds.dat"))
  ; reset actor groups
  (= (enemies pickups player particles) nil)
  ; spawn actors
  (do
    (let spawn (tilemap "maps/spawn.dat"))
    (let y 0)
    (while (< y (height spawn))
      (let x 0)
      (while (< x (width spawn))
        (let id (tile spawn x y)
             px (* x (width tiles.bmp))
             py (* y (width tiles.bmp))
        )
        (if (is id 39) (Player  px py)
            (is id 40) (Monster px py)
            (is id 41) (Ufo     px py)
            (is id 42) (Ghost   px py)
            (is id 43) (Gem     px py)
        )
        (= x (+ x 1))
      )
      (= y (+ y 1))
    )
  )
))

(= solid? (func (x y)
  (let t (tile level (// x 8) (// y 8)))
  (or (not t) (and (< -1 t) (< t 15)) (< x 0))
))

(= draw-map (func (px py map)
  (let c (camera))
  (camera 0 0)
  (draw (* px (car c)) (* py (cdr c)) tiles.bmp map)
  (camera (car c) (cdr c))
))

(= group-step (func (group)
  (let res nil)
  (each (eval group) (func (e)
    (e':step)
    (if (e':alive?) (= res (cons e res)))
  ))
  (apply = (list group res))
))

(= message (func (msg)
  (let w (+ 2 (* (width font.bmp) (strlen msg)))
       h (* (width font.bmp) 3)
       x (* 0.5 (- WIDTH  w))
       y (* 0.5 (- HEIGHT h))
       c (camera)
  )
  (camera 0 0)
  (fill 15 x y w h)
  (fill 0 (+ x 1) (+ y 1) (- w 2) (- h 2))
  (draw (+ x 1) (+ y (width font.bmp)) font.bmp msg)
  (camera (car c) (cdr c))
))

(= step (func ()
  (fill 13)
  (draw-map 0.80 0.80 clouds)
  (draw-map 1.00 1.00 level)
  (group-step 'enemies)
  (group-step 'pickups)
  (if player
    (do
      (player':step)
      (if (not pickups) (message "You won!"))
    )
    (do
      (message "You lose! Press space")
      (if (key "space") (init))
    ) 
  )
  (group-step 'particles)
))
